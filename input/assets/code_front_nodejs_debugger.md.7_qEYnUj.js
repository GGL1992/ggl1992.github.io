import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.EKgu3izQ.js";const g=JSON.parse('{"title":"调试","description":"","frontmatter":{},"headers":[],"relativePath":"code/front/nodejs/debugger.md","filePath":"code/front/nodejs/debugger.md"}'),e={name:"code/front/nodejs/debugger.md"},t=n(`<h1 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h1><h2 id="vscode-调试" tabindex="-1">vscode 调试 <a class="header-anchor" href="#vscode-调试" aria-label="Permalink to &quot;vscode 调试&quot;">​</a></h2><p>在 vscode 中，点击右侧的 debugger 面板，然后点击<code>运行与调试</code>，然后在弹出框中选择<code>nodejs</code>。</p><p>或者在 vscode 中，点击右侧的 debugger 面板，然后点击<code>javascript调试终端</code>或者<code>运行与调试</code>面板，通过这个调试终端执行指令都会唤起 debug 模式。</p><p>或者，在日常开发中，运行项目一般都是通过执行 npm 脚本，</p><p>比如开发启动项目 npm run dev，构建项目 npm run build 等等。</p><p>package.json 内容如下。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node debug-chrome.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node debug-chrome.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过上面的 js 调试终端 运行进入调试，</p><p>也可以在编辑器中触发。</p><h2 id="vscode-调试功能" tabindex="-1">vscode 调试功能 <a class="header-anchor" href="#vscode-调试功能" aria-label="Permalink to &quot;vscode 调试功能&quot;">​</a></h2><p>① 继续执行</p><p>点击后会继续执行代码，直到发现下一个断点。</p><p>② 单步跳过</p><p>直接执行下一条语句，并跳过当前函数内部的所有语句。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个数组并初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个对象并初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  city: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New York&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出原始数组和对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断点:::</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The original array is:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArray);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The original object is:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myObject);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向数组中添加一个元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新对象中的一个属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断点:::</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myObject.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出修改后的数组和对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The modified array is:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArray);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The modified object is:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myObject);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>如上所示，不会执行 console.log 内部的逻辑，直接调到了下一个 console 语句，表现上像一行行的执行了。</p><p>③ 单步调试</p><p>执行下一条语句并进入当前函数内部继续调试，</p><p>比如上面的 js，从左下角的调用堆栈可以看出来，是进入了 console.log 函数内部执行。</p><h2 id="浏览器调试" tabindex="-1">浏览器调试 <a class="header-anchor" href="#浏览器调试" aria-label="Permalink to &quot;浏览器调试&quot;">​</a></h2><p>在使用命令行执行脚本时添加一个参数 --inspect-brk，</p><p>表示以调试模式启动并且在首行断住。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect-brk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./debug.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到终端里打印了一个 WebSocket 地址。</p><p>此时使用 <code>Chrome/Edge</code> 访问 <code>chrome://inspect</code> 或者 <code>edge://inspect</code> 就能看到咱们 debug 的目标程序，点击 inspect 就能看见和 VS Code 里类似的调试面板了。</p><p>同样的也是在左侧行号处添加断点，右侧包含与 VS Code 一样作用的 监视器、断点、变量，调用堆栈 等面板。</p><p>当然断点也可以直接写在代码里，关键字为 <code>debugger</code>。</p><h2 id="使用命令行调试" tabindex="-1">使用命令行调试 <a class="header-anchor" href="#使用命令行调试" aria-label="Permalink to &quot;使用命令行调试&quot;">​</a></h2><p>没有 IDE，没有 Chrome 能调试吗？当然能！！！</p><p>Node 内置了命令行中调试的指令，下面慢慢道来。</p><h3 id="inspect" tabindex="-1">inspect <a class="header-anchor" href="#inspect" aria-label="Permalink to &quot;inspect&quot;">​</a></h3><p>inspect 是 Node.js 提供的一个命令行工具，具体用法如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug-inspect.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里仍然使用上面的代码进行调试演示，debugger 同样生效。</p><h3 id="调试指令介绍" tabindex="-1">调试指令介绍 <a class="header-anchor" href="#调试指令介绍" aria-label="Permalink to &quot;调试指令介绍&quot;">​</a></h3><p>下面是一些常用的指令：</p><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">sb、setBreakpoint</td><td style="text-align:left;">在代码中的任何位置设置断点。可以使用 sb(10) 在第 10 行设置断点； <code>sb(&#39;filename.js&#39;, 10)</code> 在 filename.js 文件的第 10 行设置断点</td></tr><tr><td style="text-align:left;">c、cont</td><td style="text-align:left;">继续执行程序，直到碰到下一个断点或者程序结束</td></tr><tr><td style="text-align:left;">n、next</td><td style="text-align:left;">跳过当前行，执行下一行，并停在下一行</td></tr><tr><td style="text-align:left;">s、step</td><td style="text-align:left;">进入当前行调用的函数，如果当前行没有函数调用，则执行下一行，并停在下一行</td></tr><tr><td style="text-align:left;">o、out</td><td style="text-align:left;">跳出当前函数，到调用当前函数的函数处，并停在该函数的下一行</td></tr><tr><td style="text-align:left;">repl</td><td style="text-align:left;">进入 REPL 模式。在该模式下，你可以查看变量的值，运行任何表达式，甚至修改变量的值，而不需要停止程序运行</td></tr><tr><td style="text-align:left;">watch</td><td style="text-align:left;">观察变量的值的改变。例如， <code>watch(&#39;myArray&#39;)</code> 将观察 myArray 变量的值的改变，每当它的值改变时，调试器都会记录下来。</td></tr><tr><td style="text-align:left;">watchers</td><td style="text-align:left;">查看所有监事器</td></tr></tbody></table><p>当然还提供了许多其他的指令，例如 list（打印当前执行到的代码）、backtrace（调用堆栈信息） 等等。你可以在调试过程中随时输入 help 来查看所有可用的指令。</p>`,39),l=[t];function p(h,r,k,d,c,o){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
