import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.EKgu3izQ.js";const g=JSON.parse('{"title":"变量与标识符","description":"","frontmatter":{},"headers":[],"relativePath":"code/end/java/bianliangyubiaoshifu.md","filePath":"code/end/java/bianliangyubiaoshifu.md"}'),t={name:"code/end/java/bianliangyubiaoshifu.md"},e=n(`<h1 id="变量与标识符" tabindex="-1">变量与标识符 <a class="header-anchor" href="#变量与标识符" aria-label="Permalink to &quot;变量与标识符&quot;">​</a></h1><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><p>被 java 语言赋予了特殊的含义，用做专门用途的字符串（单词）。</p><p>如： <code>class</code>, <code>public</code>，<code>static</code>，<code>void</code>等。</p><p>特点：关键字全部是小写字母。</p><p><code>goto</code>，<code>const</code>被占用了，但是现在还没有用法，他们是保留字。</p><p><code>null</code>，<code>true</code>, <code>false</code>是字面量，不是关键字。</p><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>java 中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p>标识符命名规则（强制遵守）：</p><ul><li><p>由 26 个英文字母大小写，<code>0-9</code>，<code>_</code>或<code>$</code>组成。</p></li><li><p>不能以数字开头。</p><ul><li><p>为什么不能用数字开头？为了“自洽”。比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就混乱了。</p></li></ul></li><li><p>不可以使用关键字和保留字，但能包含关键字和保留字。</p></li><li><p>Java 中严格区分大小写，长度无限制。</p></li><li><p>标识符不能包含空格。</p></li></ul><p>标识符命名规范：</p><ul><li><p>多单词组成时所有字母都小写：<code>xxxyyyzzz</code></p><p>例如：<code>java.lang</code>，<code>com.ggl.bean</code></p></li><li><p>类名，接口名：多单词组成时，所有单词的首字母大写：<code>XxxYyyZzz</code></p><p>例如：<code>HelloWorld</code>，<code>String</code>，<code>System</code></p></li><li><p>变量名、方法名：多单词组成时，第一个单词字母小写，第二个单词开始每个单词字母大写：\`\`xxxYyyZzz\`</p><p>例如：<code>age</code>，<code>name</code>，<code>getName</code></p></li><li><p>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ</p><p>例如：<code>PI</code>，<code>MAX_VALUE</code></p></li><li><p>定义标识符时，要做到见名知意</p></li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量的概念：</p><ul><li>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。</li><li>变量的构成包含三个要素：数据类型、变量名、存储的值。</li><li>java 中变量声明的格式：<code>数据类型 变量名 = 存储的值</code>。</li></ul><p>变量的作用：</p><p>用于在内存中保存数据。</p><p>注意事项：</p><ul><li>变量必须先声明再使用。</li><li>变量只有在其作用域内才有效。</li><li>同一作用域，不能定义重名的变量。</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>按数据类型来分类：</p><ul><li><p>基本数据类型（8 种）</p><ul><li>整型：<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code></li><li>浮点型：<code>float</code>，<code>double</code></li><li>字符型：<code>char</code></li><li>布尔型：<code>boolean</code></li></ul></li><li><p>引用数据类型</p><ul><li>类：<code>class</code></li><li>数组：<code>array</code></li><li>接口：<code>interface</code></li><li>枚举：<code>enum</code></li><li>注解：<code>annotation</code></li><li>记录：<code>record</code></li></ul></li></ul><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h3><p>整型占用空间：</p><p>java 各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证 Java 程序的可移植性。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">占用存储空间</th><th style="text-align:left;">表示范围</th></tr></thead><tbody><tr><td style="text-align:left;">byte</td><td style="text-align:left;">1 字节=8bit 位</td><td style="text-align:left;">-128~127</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">-2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><p>为什么 1byte 表示范围是<code>-128~127</code>？因为 2<sup>8</sup>=256</p><p>为了表示负数，一分为 2，同时因为存在 0，所以正数分到了 127。其他类型同理。</p><p>定义 long 类型的变量，赋值时需要以<code>l</code>或<code>L</code>作为后缀。</p><p>Java 程序中整型变量通常声明为 int 型，除非不足以表示较大的数，才使用 long。</p><p>java 的整型常量默认为 int 型。</p><h3 id="浮点类型" tabindex="-1">浮点类型 <a class="header-anchor" href="#浮点类型" aria-label="Permalink to &quot;浮点类型&quot;">​</a></h3><p>与整形类型类似，java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">占用存储空间</th><th style="text-align:left;">表示范围</th></tr></thead><tbody><tr><td style="text-align:left;">单精度 float</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-3.403E38~3.403E38</td></tr><tr><td style="text-align:left;">双精度 double</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">-1.798E308~1.798E308</td></tr></tbody></table><p>单精度占用的空间比 long 类型少，表示的范围比 long 类型大，但是精读低。</p><p>浮点型常量有两种表示形式：</p><ul><li>十进制数形式。如：<code>3.14</code> <code>314.0f</code> <code>.314(必须有小数点)</code></li><li>科学计数法形式。如：<code>3.14e2</code> <code>314E2</code> <code>314E-2</code></li></ul><p>float：单精度，尾数可以精确到 7 位有效数字，很多情况下，精度很难满足需求。</p><p>double：双精度，精读是 float 的两倍。通常采用此类型。</p><p>定义 float 类型的变量，赋值时需要以<code>f</code>或者<code>F</code>作为后缀。</p><p>Java 的浮点型常量默认为 double 型。</p><p>在开发中，大家定义浮点型变量时，如果没有特殊情况的话，通常都声明为 double 类型，因为精度更高。</p><h4 id="关于浮点型精度的说明" tabindex="-1">关于浮点型精度的说明 <a class="header-anchor" href="#关于浮点型精度的说明" aria-label="Permalink to &quot;关于浮点型精度的说明&quot;">​</a></h4><p>并不是所有的小数都可以精确地用二进制浮点数表示。二进制浮点数不能精确的表示 0.1、0.01、0.001 这样的 10 的负次幂。</p><p>浮点类型 float、double 的数据不合适在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal</code>类。</p><p>示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.1 + 0.2 不等于 0.3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.30000000000000004</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不精确表现2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123123123f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应该为false，但是显示了true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="字符类型" tabindex="-1">字符类型 <a class="header-anchor" href="#字符类型" aria-label="Permalink to &quot;字符类型&quot;">​</a></h3><p>char 型数据用来表示通常意义上“字符”（占 2 字节）。</p><p>Java 中的所有字符都使用 Unicode 编码（映射），故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p><p>字符型变量的三种表现形式：</p><ul><li><p>形式 1：使用单引号（<code>&#39;&#39;</code>）括起来的<code>单个字符</code>。内部有且只能有一个字符。</p><p>例如： <code>char a = &#39;a&#39;</code>，<code>char b = &#39;中&#39;</code></p><p>错误示例： <code>char c = &#39;&#39;</code>， <code>char d = &#39;abc&#39;</code></p></li><li><p>形式 2：直接使用 Unicode 值来表示字符型常量：<code>\\uXXXX</code>。其中，XXXX 代表一个十六进制整数。例如：<code>\\u0023</code>表示<code>#</code>。</p></li><li><p>形式 3：Java 中还允许使用转义字符<code>\\</code>来将其后的字符转变为特殊字符型常量。例如：<code>char a = &#39;\\n&#39;;</code>， <code>\\n</code>表示换行符。</p><table><thead><tr><th>转义字符</th><th>说明</th><th>Unicode 表示方式</th></tr></thead><tbody><tr><td><code>\\n</code></td><td>换行符</td><td><code>\\u000a</code></td></tr><tr><td><code>\\t</code></td><td>制表符</td><td><code>\\u0009</code></td></tr><tr><td><code>\\&quot;</code></td><td>双引号</td><td><code>\\u0022</code></td></tr><tr><td><code>\\&#39;</code></td><td>单引号</td><td><code>\\u0027</code></td></tr><tr><td><code>\\\\</code></td><td>反斜线</td><td><code>\\u005c</code></td></tr><tr><td><code>\\b</code></td><td>退格符</td><td><code>\\u0008</code></td></tr><tr><td><code>\\r</code></td><td>回车符</td><td><code>\\u000d</code></td></tr></tbody></table></li><li><p>char 类型是可以进行运算的。因为它都对应有 Unicode 码，可以看做是一个数值。</p><p>例如： <code>char a = 97</code>，打印出来就是<code>a</code>。它对应的就是<code>ASCII码</code>的值。</p><p><code>char a = &#39;1&#39;; char b = 1;</code>这里 a 不等于 b，a 对应的是字符 1，而 b 是 ASCII 码的数值。</p></li></ul><h3 id="布尔类型" tabindex="-1">布尔类型 <a class="header-anchor" href="#布尔类型" aria-label="Permalink to &quot;布尔类型&quot;">​</a></h3><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li><code>if</code>条件控制语句</li><li><code>while</code>循环控制语句</li><li><code>for</code>循环控制语句</li><li><code>do-while</code>循环控制语句</li></ul><p>boolean 类型数据只有两个值：<code>true</code>、<code>false</code>，无其他。</p><ul><li>不可使用 0 或者非 0 整数来代替 false 和 true，这点和 c 语言不同。</li><li>拓展：Java 虚拟机中没有任何供 boolean 值专用的字节码指令，Java 语言表达所操作的 Boolean 值，在编译之后都使用 Java 虚拟机中的 int 数据类型来代替：true 用 1 表示，false 用 0 表示。——《Java 虚拟机规范 8 版》</li><li>我们不谈 boolean 类型占用的空间大小，但是，真正的在内存中分配的话，使用的是 int 类型的 4 个字节。</li></ul><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><p>string 类型，属于引用数据类型，俗称字符串。</p><p>string 类型的变量，使用一对<code>&quot;&quot;</code>的方式进行赋值。其内部可以包含 0 个，1 个或多个字符。</p><p><strong>string 与基本数据类型变量间的运算：</strong></p><ul><li>这里的基本数据类型包括 boolean 在内的 8 种。</li><li>string 与基本数据类型变量间只能做连接运算。使用<code>+</code>表示。</li><li>运算的结果是 string 类型。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确，返回hello1true，因为和string连接后，返回的还是string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，int和boolean只能不能运算</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>如何将 string 类型转换为基本数据类型</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="基本数据类型变量间的转换规则" tabindex="-1">基本数据类型变量间的转换规则 <a class="header-anchor" href="#基本数据类型变量间的转换规则" aria-label="Permalink to &quot;基本数据类型变量间的转换规则&quot;">​</a></h2><ul><li><p>这里提到可以做运算的基本数据类型有 7 种，不包含 boolean 类型。</p></li><li><p>运算规则包括：</p><ul><li><p>自动类型提升</p><p>示例：</p><p><code>int a = 10; long b = a;</code>，当容量小的与容量大的变量做运算时，结果自动转换为容量大的数据类型。</p><p>说明：<code>此时的容量小或者大，并非指占用的内存空间的大小，而是指表示数据的范围的大小。</code></p><p>比如 long（8 字节），float（4 字节），但是 float 表示的数据范围更大。</p><p><strong>转换规则：</strong></p><p><code>short a = 1; byte b = 2; int c = a + b;</code>，short 和 byte 类型相加，返回的是 int 类型，不能是更小的类型，更小的类型会报错。</p><p><code>byte a = 1; byte b = 2; int c = a + b</code>, byte 和 byte 类型相加，返回的也是 int 类型，不能是更小的类型，更小的类型会报错。</p><p>char 类型也同理。<code>char a = 97; byte b = 2; int c = a + b;</code>。</p><p>所以：</p><p><code>byte/short/char -&gt; int -&gt; long -&gt; float -&gt; double</code>。</p><p>byte、short、char 类型的变量之间做运算，结果为 int 类型。</p><p><strong>注意：</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个也没报错，因为这个给当做自动类型提升了，把int类型的123赋值给了long类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123123123123123123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个报错了，因为这个数的范围超出int类型范围了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，因为它会将这个数默认认为是double，不能自动提升</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>强制类型转换</p><p>将取值范围大的类型强制转换为取值范围小的类型，需要进行强制类型转换。</p><p>强制类型转换过程中，可能导致精读损失。</p><p>示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动类型提升</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 强制类型转换</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)c; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 精读损失</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li></ul><h2 id="计算机存储单位" tabindex="-1">计算机存储单位 <a class="header-anchor" href="#计算机存储单位" aria-label="Permalink to &quot;计算机存储单位&quot;">​</a></h2><p>字节(Byte)：是计算机用于计算存储容量的基本单位，一个字节等于 8bit。</p><p>位(bit)：是数据存储的最小单位。二进制数系统中，每个 0 或者 1 就是一个位，叫做 bit(比特)，其中 8bit 就称为一个字节（Byte）。</p><p>转换关系：</p><ul><li>8 bit = 1 Byte</li><li>1024 Byte = 1 KB</li><li>1024 KB = 1 MB</li><li>1024 MB = 1 GB</li><li>1024 GB = 1 TB</li></ul><p>为什么是 1024？2<sup>10</sup> = 1024</p><h2 id="计算机底层如何存储数据" tabindex="-1">计算机底层如何存储数据 <a class="header-anchor" href="#计算机底层如何存储数据" aria-label="Permalink to &quot;计算机底层如何存储数据&quot;">​</a></h2><p>计算机世界中只有二进制，所以计算机中存储和运算的所有数据都要转为二进制，包括数字、字符、图片、音视频等。</p><p>进制的分类：</p><ul><li><p>十进制（decimal）</p><ul><li>数字组成：0-9</li><li>进位规则：逢十进一</li></ul></li><li><p>二进制（binary）</p><ul><li>数字组成：0-1</li><li>进位规则：逢二进一，以<code>0b</code>或者<code>0B</code>开头。</li></ul></li><li><p>八进制（octal）很少使用</p><ul><li>数字组成：0-7</li><li>进位规则：逢八进一，以数字 0 开头表示。</li></ul></li><li><p>十六进制</p><ul><li>数字组成 0-9，a-f</li><li>进位规则：逢十六进一，以<code>0x</code>或<code>0X</code>开头表示，此处的<code>a-f</code>不区分大小写。</li></ul></li></ul><p>示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 023</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x23a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,b,c,d); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印出来都是十进制，因为底层存的是二进制，都转化了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="二进制的由来" tabindex="-1">二进制的由来 <a class="header-anchor" href="#二进制的由来" aria-label="Permalink to &quot;二进制的由来&quot;">​</a></h3><p>二进制，是计算机技术中广泛采用的一种数制，由德国数理哲学大师布莱尼次于 1679 年发明。</p><p>二进制数据是用 0 和 1 两个数码来表示的数。它的基数是 2，进位规则是逢二进一。</p><p>二进制广泛应用于我们生活的方方面面。比如：摩尔斯电码，由两种信号组成，短促的点信号“·”，读滴，保持一定时长的长信号“-”读哒，然后组成了 26 个字母，从而拼写出相应的单词。</p><h3 id="数据存储" tabindex="-1">数据存储 <a class="header-anchor" href="#数据存储" aria-label="Permalink to &quot;数据存储&quot;">​</a></h3><p>计算机数据的存储使用二进制<code>补码</code>的形式存储，并且<code>最高位是符号位</code>。<code>参与运算的也是补码</code>。</p><p><code>正数：最高位是0</code>。</p><p><code>负数：最高位是1</code>。</p><p>规定：</p><p>正数的补码、反码、原码一样，称为<code>三码合一</code>。</p><p>负数（补码、反码、原码不一样）：</p><ul><li>负数的原码：把十进制转为 2 进制，然后最高位设置为 1。</li><li>负数的反码：在原码的基础上，符号位不变，其余位取反（0 变 1，1 变 0）</li><li>负数的补码：反码+1</li></ul><p>为什么 byte 类型的<code>127 + 1 = -128</code> ？</p><p>因为，127 的原码、反码、补码都为<code>01111111</code>，补码参与运算，加 1 就是<code>10000000</code>，它就是-128 的补码的表示形式，同时，由于-128 是 byte 类型能够表示的最小值，它使用了所有的 8 位来表示这个值，所以-128 只有补码表示，没有对应的原码和反码。其它的值有原反补。</p><p>二进制如何转为 10 进制。</p><p>例如：<code>111</code>就等于 1x2<sup>2</sup> + 1x2<sup>1</sup> + 1x2<sup>0</sup> = 7</p><p>10 进制如何转为 2 进制。</p><p>将 10 进制一直除以 2，取余，最后将余数倒过来取值，就是 2 进制的数的表示。</p><p>二进制如何转为 8 进制。</p><p>因为 8 = 2<sup>3</sup>，所以，将二进制每 3 位为 1 组，将对应的二进制的组里的数转为对应的数字，拼接起来即可。</p><p>二进制如何转为 16 进制。</p><p>因为 16 = 2<sup>4</sup>，所以，将二进制每 4 位为 1 组，将对应的二进制的组里的数转为对应的数字，拼接起来即可。</p><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="取余运算符" tabindex="-1">取余运算符 <a class="header-anchor" href="#取余运算符" aria-label="Permalink to &quot;取余运算符&quot;">​</a></h3><p>开发中，常用来判断某个数能否被另一个数整除。</p><p>取模以后，结果与被模数相同。</p><p>举例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>题目：</p><p>随意给出一个三位整数，打印显示它的个位、十位、百位数的值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 153</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 个位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 十位   int shi = num %100 / 10; 也行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 百位</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="自加自减" tabindex="-1">自加自减 <a class="header-anchor" href="#自加自减" aria-label="Permalink to &quot;自加自减&quot;">​</a></h3><p><code>a--</code>: 先运算，再自减</p><p><code>--a</code>: 先自减，再运算</p><p><code>a++</code>: 先运算，再自加</p><p><code>++a</code>: 先自加，再运算</p><p>自加自减不会改变变量的数据类型。</p><p>比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个牵扯到类型转换什么的，效率更低</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 还可以</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样不会改变数据类型，更省内存空间，效率更高</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>题目：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  i = 2      3    4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      1   +   3 * 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;j = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// j = 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// i = 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h3><p>赋值的几种方式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式2，连续赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 也可以合并着写：int c,d;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式3：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>+=，-=，*=，/=，%=</code>：</p><p>这几种方式不会改变数据类型，举例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>练习题目：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     10   11      12</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// n = n + (n++) + (++n);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// n = 10 + 10 + 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="比较-关系-运算符" tabindex="-1">比较（关系）运算符 <a class="header-anchor" href="#比较-关系-运算符" aria-label="Permalink to &quot;比较（关系）运算符&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th style="text-align:center;">范例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">相等于</td><td style="text-align:center;">4 == 3</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td style="text-align:center;">4 != 3</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td style="text-align:center;">4 &lt; 3</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td style="text-align:center;">4 &gt; 3</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于等于</td><td style="text-align:center;">4 &lt;= 3</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于等于</td><td style="text-align:center;">4 &gt;= 3</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">instanceof</td><td style="text-align:center;">检查是否是类的对象</td><td style="text-align:center;">&quot;hello&quot; instanceof String</td><td style="text-align:center;">true</td></tr></tbody></table><p>比较关系运算符的结果都是 boolean 类型，也就是要么是 true，要么是 false。</p><p><code>&gt; &lt; &gt;= &lt;= !=</code>，只适用于基本数据类型（除 boolean 类型外）</p><p><code>== !=</code> 适用于基本数据类型和引用数据类型。</p><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">a</th><th style="text-align:center;">b</th><th style="text-align:center;">a&amp;b</th><th style="text-align:center;">a&amp;&amp;b</th><th style="text-align:center;">a|b</th><th style="text-align:center;">a||b</th><th style="text-align:center;">!a</th><th style="text-align:center;">a^b</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr></tbody></table><p>逻辑运算符，操作的都是 boolean 类型的变量或常量，而且运算的结果也是 boolean 类型的值。</p><p>运算符说明：</p><ul><li><p><code>&amp;和&amp;&amp;</code>：表示且的关系，<code>&amp;</code>叫做逻辑与，<code>&amp;&amp;</code>叫做短路与，当两边的值都为 true 时，结果才为 true，否则为 false。</p><p>区别：</p><ul><li>如果符号左边都为 true，则<code>&amp;</code>和<code>&amp;&amp;</code>都会执行符号右边的操作。</li><li>如果符号左边是 false，则<code>&amp;</code>会继续执行符号右边的操作，<code>&amp;&amp;</code>不会执行符号右边的操作。</li></ul><p>开发中，我们推荐使用<code>&amp;&amp;</code>。</p></li><li><p><code>|和||</code>：表示或的关系，<code>|</code>叫做逻辑或，<code>||</code>叫做短路或，当两边有一个值为 true 时，结果为 true，都为 false 时，结果才为 false。</p><p>区别：</p><ul><li>如果符号左边都为 false，则<code>|</code>和<code>||</code>都会执行符号右边的操作。</li><li>如果符号左边是 true，则<code>|</code>会继续执行符号右边的操作，<code>||</code>不会执行符号右边的操作。</li></ul><p>开发中，我们推荐使用<code>||</code>。</p></li><li><p><code>!</code>：表示非的关系，当值为 true 时，结果为 false，当值为 false 时，结果为 true。</p></li><li><p><code>^</code>：表示异或的关系，当两边布尔值不同时，结果为 true，相同时，结果为 false。</p><p>理解：异或，追求的就是“异”</p></li><li><p>逻辑运算符用于连接布尔型表达式，在 java 中不可以写成<code>3&lt;x&lt;6</code>，应该写成<code>x &gt; 3 &amp; x &lt; 6</code>。</p></li><li><p>逻辑运算符常用于判断结构、循环结构中。</p></li></ul><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h3><p>基本语法：</p><p>注意：无<code>&lt;&lt;&lt;</code>运算符。</p><p>先换成二进制，然后进行操作 1 和 0 即可。操作的都是补码。</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th style="text-align:center;">范例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&lt;&lt;</code></td><td style="text-align:center;">左移</td><td style="text-align:center;"><code>3 &lt;&lt; 2 = 12 -&gt; 3 * 2 * 2 = 12</code></td></tr><tr><td style="text-align:center;"><code>&gt;&gt;</code></td><td style="text-align:center;">右移</td><td style="text-align:center;"><code>3 &gt;&gt; 1 = 1 -&gt; 3 / 2 = 1</code></td></tr><tr><td style="text-align:center;"><code>&gt;&gt;&gt;</code></td><td style="text-align:center;">无符号右移</td><td style="text-align:center;"><code>3 &gt;&gt; 1 = 1 -&gt; 3 / 2 = 1</code></td></tr><tr><td style="text-align:center;"><code>&amp;</code></td><td style="text-align:center;">与运算</td><td style="text-align:center;"><code>6 &amp; 3 = 2</code></td></tr><tr><td style="text-align:center;"><code>|</code></td><td style="text-align:center;">或运算</td><td style="text-align:center;"><code>6 | 3 = 7</code></td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">异或运算</td><td style="text-align:center;"><code>6 ^ 3 = 5</code></td></tr><tr><td style="text-align:center;"><code>~</code></td><td style="text-align:center;">取反运算</td><td style="text-align:center;"><code>~6 = -7</code></td></tr></tbody></table><p>6 取反是怎么做的？6 的二进制是<code>00000000000000000000000000000110</code>，原反补相同，取反:<code>11111111111111111111111111111001</code>，反码：<code>11111111111111111111111111111000</code>，原码：<code>10000000000000000000000000000111</code>，换成 10 进制就是-7.</p><p><code>左移运算符 &lt;&lt;：</code></p><p>在一定范围内：</p><p>规则：将操作数的所有位向左移动指定的位数，右侧空出的位用 0 填充。</p><p>注意：左移一位相当于乘以 2，左移 n 位相当于乘以 2 的 n 次方。</p><p>在 Java 中，左移运算符 &lt;&lt; 对符号位（最高位）的处理是将符号位复制到新的空位中。这意味着无论操作数是正数还是负数，左移操作都会保留符号位。换句话说，左移操作不会改变数值的符号。</p><p>如果超出了一定的位数，比如：<code>int n = 7; n &lt;&lt; 29;</code>这时候就会变为负数了。</p><p>为什么呢？因为都是拿补码进行计算的。</p><p>比如 1，它的补码是: <code>00000000000000000000000000000001</code>，往左移，前面都是 0。-1 它的补码是：<code>11111111111111111111111111111111</code>，所以往左移，前面都是 1。</p><p>但是正数比如：<code>00000000000000000000000000111111</code>，它左移到一定的位数，前面就是 1 了。</p><p><code>带符号右移运算符 &gt;&gt;：</code></p><p>规则：将操作数的所有位向右移动指定的位数，左侧空出的位用符号位（最高位，即最左边的位）填充。如果操作数是正数，则左侧填充 0；如果是负数，则左侧填充 1。</p><p>示例：假设 int y = 5;（在二进制中，5 是 0000 0101），y &gt;&gt; 1 将得到 2（在二进制中，2 是 0000 0010）。如果 int z = -5;（在二进制中，-5 是 1111 1011），z &gt;&gt; 1 将得到 -3（在二进制中，-3 是 1111 1101）。</p><p>注意：在一定范围内，带符号右移一位相当于除以 2 并向下取整，带符号右移 n 位相当于除以 2 的 n 次方并向下取整。</p><p><code>无符号右移 &gt;&gt;&gt;：</code></p><p>在 Java 中，无符号右移运算符 <code>&gt;&gt;&gt;</code> 是一种特殊的位运算符，它执行的操作与带符号右移运算符 <code>&gt;&gt;</code> 类似，但有一个关键的区别：无论操作数的符号如何，无符号右移都会在左侧插入零。这意味着它总是执行逻辑右移，而不是算术右移。</p><p>具体规则如下：</p><p>将操作数的所有位向右移动指定的位数。左侧空出的位用 0 填充，无论操作数的符号位是什么。</p><p><code>&amp;</code>：二进制位进行<code>&amp;</code>运算，只有<code>1&amp;1</code>时结果为 1，否则为 0。</p><p><code>|</code>：二进制位进行<code>|</code>运算，只有<code>0&amp;0</code>时结果为 0，否则为 1。</p><p><code>^</code>：相同二进制位进行<code>^</code>运算，结果是 0，不同为 1。</p><p><code>~</code>：对应位为 1，则结果是 0，对应位为 0，则结果是 1。</p><p>面试题：</p><p>用高效的方式计算<code>2 * 8</code>：<code>2 &lt;&lt; 3</code>。这个比普通的 2 x 8 高效。</p><p>如何交换两个变量的值？</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 交换两个int的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际开发中推荐</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优点：不需要定义临时变量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缺点：难，适用性差（不适用于非数值类型），可能超出int的范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原理 m = k ^ n = (m ^ n) ^ n</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优点：不需要定义临时变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缺点：太难，适用性差（不适用于非数值类型），但是不用担心超出int的范围</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原理和方式2类似</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="三元运算符" tabindex="-1">三元运算符 <a class="header-anchor" href="#三元运算符" aria-label="Permalink to &quot;三元运算符&quot;">​</a></h3><p><code>(条件表达式) ? 表达式1 : 表达式2</code>：</p><ul><li>条件表达式的结果是 boolean 类型。</li><li>如果条件表达式的结果是 true，则执行表达式 1，否则，执行表达式 2.</li><li>表达式 1 和表达式 2，需要是相同的类型或能兼容的类型。</li></ul><p>开发中，凡是可以用条件运算符的位置，都可以改写成 if-else，反之，能使用 if-else 的结构，不一定能改写成条件运算符。</p><p>建议：在二者都能使用的情况下，推荐使用条件运算符，因为执行效率稍高。</p><p>条件运算符只是表达式，执行效率高，if-else 是语句，执行相对复杂，效率比表达式低。</p><p>题目：</p><p>今天是周 2，10 天以后是周几？要求：控制台输出“今天是周 2，10 天以后是周 X”。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> week </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">week </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">week </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;今天是周2,10天以后是周&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((week </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;日&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> week))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="企业真题" tabindex="-1">企业真题 <a class="header-anchor" href="#企业真题" aria-label="Permalink to &quot;企业真题&quot;">​</a></h2><p><code>boolean占几个字节？</code>：</p><p>答：编译时不谈几个字节。</p><p>但是 JVM 在给 boolean 类型分配内存空间的时候，boolean 类型的变量占据一个槽位（slot，等于 4 个字节）。</p><p>拓展：在内存中，byte、short、char、boolean、int、float：占用 1 个 slot。double、long：占用 2 个 slot。</p><p><code>为什么在java中0.1 + 0.2结果不是0.3？</code>：</p><p>在代码中测试 0.1 + 0.2，你会惊讶的发现，结果不是 0.3，而是 0.3000...4，这是为什么？</p><p>几乎所有现代的编程语言都会遇到上述问题，包括 JavaScript、Ruby、Python、Switch 和 Go 等，引发这个问题的原因是，它们都采用了 IEEE 754 标准。</p><blockquote><p>IEEE 是指“电气与电子工程师协会”，其在 1985 年发布了一个 IEEE 754 计算标准，根据这个标准，小数的二进制表达能够有最大的精度上限提升。但无论如何，物理边界是突破不了的，它仍然不可能实现每一个十进制小数，都对应一个二进制小数。正因如此，产生了 0.1 + 0.2 不等于 0.3 的问题。</p></blockquote><p>具体的：</p><p>整数变为二进制，能够做到“每个十进制整数都有对应的二进制数”，比如数字 3，二进制就是 11；再比如，数字 43 就是二进制 101011，这个毫无争议。</p><p>对于小数，并不能做到“每个小数都有对应的二进制数字”。举例来说，二进制小数 <code>0.0001</code> 表示十进制数 <code>0.0625</code>（至于它是如何计算的，不用深究）；二进制小数 <code>0.0010</code> 表示十进制数 <code>0.125</code>；二进制小数 <code>0.0011</code> 表示十进制数 <code>0.1875</code>。看，对于四位的二进制小数，二进制小数虽然是连贯的，但是十进制小数却不是连贯的。比如，你无法用四位二进制小数的形式表示<code>0.125~0.1875</code>之间的十进制小数。</p><p>所以在编程中，遇见小数判断相等情况，比如开发银行、交易等系统，可以采用<code>四舍五入</code>或者<code>同乘同除</code>等方式进行验证，避免上述问题。</p><h3 id="拓展" tabindex="-1">拓展： <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展：&quot;">​</a></h3><p>根据<code>IEEE 754标准</code>，将一个十进制小数转换为一个二进制小数的步骤如下：</p><p>确定符号位，正数为 0，负数为 1。</p><p>将十进制小数转换为二进制小数，整数部分用除 2 取余法，小数部分用乘 2 取整法。</p><p>将二进制小数规格化，即将小数点左移或右移，使得小数点后第一位为 1，同时记录移动的位数，作为阶数。</p><p>将阶数加上偏移量，得到阶码。对于单精度浮点数，偏移量为<code>127</code>，对于双精度浮点数，偏移量为<code>1023</code>。</p><p>将小数点后的数作为尾数，忽略最高位的 1。</p><p>将符号位、阶码和尾数按顺序组合，得到 IEEE 754 标准的二进制格式。对于单精度浮点数，符号位占 1 位，阶码占 8 位，尾数占 23 位。对于双精度浮点数，符号位占 1 位，阶码占 11 位，尾数占 52 位。</p><p>例如，将十进制小数<code>-0.75</code>转换为单精度浮点数的二进制格式：</p><p>符号位为 1，因为<code>-0.75</code>是负数。</p><p><code>-0.75</code>的二进制小数为<code>-0.11</code>，整数部分为 0，小数部分为<code>0.75</code>，<code>0.752=1.5</code>，取整数部分<code>1</code>，<code>0.52=1</code>，取整数部分 1，结束。</p><p><code>-0.11</code>规格化为<code>-1.1*2^(-1)</code>，阶数为<code>-1</code>。</p><p>阶数加上偏移量 127，得到阶码为<code>126</code>，即<code>0111 1110</code>。</p><p>小数点后的数为 1，忽略最高位的 1，得到尾数为<code>100 0000 0000 0000 0000 0000</code>。</p><p>组合符号位、阶码和尾数，得到<code>-0.75</code>的二进制格式为：<code>1 011 1111 0 100 0000 0000 0000 0000 0000</code>。</p>`,209),l=[e];function p(h,k,d,r,c,o){return a(),i("div",null,l)}const y=s(t,[["render",p]]);export{g as __pageData,y as default};
