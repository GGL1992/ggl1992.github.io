import{_ as e,c as a,o,a1 as t}from"./chunks/framework.EKgu3izQ.js";const d="/input/assets/java-0003.atfWh3RS.png",_=JSON.parse('{"title":"idea 的使用","description":"","frontmatter":{},"headers":[],"relativePath":"code/end/java/idea.md","filePath":"code/end/java/idea.md"}'),l={name:"code/end/java/idea.md"},p=t('<h1 id="idea-的使用" tabindex="-1">idea 的使用 <a class="header-anchor" href="#idea-的使用" aria-label="Permalink to &quot;idea 的使用&quot;">​</a></h1><h2 id="卸载" tabindex="-1">卸载 <a class="header-anchor" href="#卸载" aria-label="Permalink to &quot;卸载&quot;">​</a></h2><p>在控制面板 -&gt; 程序 -&gt; 卸载程序，直接卸载 idea，也会卸载不干净。</p><p>还需要清除两个地方：</p><p><code>c -&gt; 用户 -&gt; [用户名] -&gt; AppData -&gt; Local -&gt; JetBrains</code>。</p><p><code>c -&gt; 用户 -&gt; [用户名] -&gt; AppData -&gt; Roaming -&gt; JetBrains</code>。</p><p>这里面有 idea 的配置，如果没安装其他的，可以直接删了。</p><h2 id="激活使用" tabindex="-1">激活使用 <a class="header-anchor" href="#激活使用" aria-label="Permalink to &quot;激活使用&quot;">​</a></h2><p>如果安装破解后，点击图标无反应、无法启动，或者闪退：</p><p>原因：之前使用过的比如 2021.2.2 版本，破解了。新版 IEDA 太智能了，把现有的启运参数也都复制过去了。又因为最新的 IDEA，不兼容 pojie 程序-javaagent:D:\\develop_tools\\IDEA\\IntelliJ IDEA 2021.2.2\\bin\\jetbrains-agent.jar 了，所以报错了，所以 JVM 结束了，所以没有启动画面，凉凉了。</p><p>解决方法：</p><p>打开<code>C:\\Users\\[用户名]\\AppData\\Roaming\\JetBrains\\IntelliJIdea2022.1\\idea64.exe.vmoptions</code>这个文件。</p><p>内容如下所示：</p><p><img src="'+d+'" alt="删除内容" loading="lazy"></p><p>删除红框的数据以后，再登录即可正常进入。</p><h2 id="idea-项目结构" tabindex="-1">idea 项目结构 <a class="header-anchor" href="#idea-项目结构" aria-label="Permalink to &quot;idea 项目结构&quot;">​</a></h2><p>层级关系：</p><p><code>project（工程） -&gt; module（模块） -&gt; package（包） -&gt; class（类）</code></p><p>具体的：</p><p>一个 project 可以创建多个 module</p><p>一个 module 可以创建多个 package</p><p>一个 package 可以创建多个 class</p><p>这些结构的划分，是为了方便管理功能代码。</p><h3 id="project-和-module" tabindex="-1">project 和 module <a class="header-anchor" href="#project-和-module" aria-label="Permalink to &quot;project 和 module&quot;">​</a></h3><p>在 IntelliJ IDEA 中，提出了 project 和 module 这两个概念。</p><p>在 IDEA 中，project 是<code>最顶级的单元结构</code>，然后就是 module。目前，主流的大型项目结构基本都是多 module 的结构，这类项目一般是按功能划分的，比如：<code>user-core-module</code>，<code>user-facade-module</code>等，模块之间彼此可以<code>相互依赖</code>,有着密不可分的业务关系。因此，对于一个 project 来说：</p><ul><li>当为单 module 项目的时候，这个单独的 module 实际上就是一个 project。</li><li>当为多 module 项目的时候，多个 module 处于同一个 project 之中，此时彼此之间具有相互依赖的关联关系。</li><li>当然多个模块没有建立依赖关系的话，也可以作为单独一个小项目运行。</li></ul><h3 id="module-和-package" tabindex="-1">module 和 package <a class="header-anchor" href="#module-和-package" aria-label="Permalink to &quot;module 和 package&quot;">​</a></h3><p>在一个 module 下，可以声明多个包（package），一般命名规范如下：</p><ul><li>不要有中文</li><li>不要以数字开头</li><li>给包取名时，一般都是公司域名倒着写，而且都是小写。比如<code>www.ggl888.com</code>，那么我们的包名应该写成，<code>com.ggl888.子名字</code>。</li></ul>',30),c=[p];function i(r,n,s,u,m,h){return o(),a("div",null,c)}const j=e(l,[["render",i]]);export{_ as __pageData,j as default};
