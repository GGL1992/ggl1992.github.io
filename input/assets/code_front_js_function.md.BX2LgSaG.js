import{_ as t,c as o,o as e,a1 as n}from"./chunks/framework.EKgu3izQ.js";const h=JSON.parse('{"title":"函数 function","description":"","frontmatter":{},"headers":[],"relativePath":"code/front/js/function.md","filePath":"code/front/js/function.md"}'),a={name:"code/front/js/function.md"},c=n('<h1 id="函数-function" tabindex="-1">函数 function <a class="header-anchor" href="#函数-function" aria-label="Permalink to &quot;函数 function&quot;">​</a></h1><h2 id="声明方式" tabindex="-1">声明方式 <a class="header-anchor" href="#声明方式" aria-label="Permalink to &quot;声明方式&quot;">​</a></h2><p>1、表达式</p><p><code>const a = function() {}</code>; // 函数表达式</p><p><code>const b = () =&gt; {}</code>; // 箭头函数表达式</p><p>2、函数声明</p><p><code>function c() {}</code>; // 函数声明</p><p>函数声明与函数表达式的一个重要区别在于，函数声明是允许调用写在声明之前的从这个角度看，函数表达式就像是声明了一个变量，在执行到这里时才完成了函数的创建，然后在下面的代码里才能够调用。而函数声明则是向当前作用域做了广播：这里有一个 handler 函数，欢迎你随时随地调用我。</p>',8),r=[c];function i(s,d,_,f,p,u){return e(),o("div",null,r)}const m=t(a,[["render",i]]);export{h as __pageData,m as default};
