import{_ as s,c as a,o as e,a1 as i}from"./chunks/framework.EKgu3izQ.js";const b=JSON.parse('{"title":"运行 node","description":"","frontmatter":{},"headers":[],"relativePath":"code/front/nodejs/run.md","filePath":"code/front/nodejs/run.md"}'),n={name:"code/front/nodejs/run.md"},l=i(`<h1 id="运行-node" tabindex="-1">运行 node <a class="header-anchor" href="#运行-node" aria-label="Permalink to &quot;运行 node&quot;">​</a></h1><h2 id="运行-nodejs-的方式" tabindex="-1">运行 nodejs 的方式 <a class="header-anchor" href="#运行-nodejs-的方式" aria-label="Permalink to &quot;运行 nodejs 的方式&quot;">​</a></h2><h3 id="repl-环境" tabindex="-1">REPL 环境 <a class="header-anchor" href="#repl-环境" aria-label="Permalink to &quot;REPL 环境&quot;">​</a></h3><blockquote><p>REPL 的全称是 Read-Eval-Print Loop，它是一种编程语言交互式解释器的实现方式。</p></blockquote><p>Node.js REPL 可以让用户在命令行中输入代码片段并立即获得结果，可以快速测试 JavaScript 代码片段，进行一些简单的算术操作、字符串处理、函数调用等等。</p><p>在终端里我们输入 node 即可进入，</p><p>可以在里面直接输入表达式并执行 (Enter 回车执行)。</p><p>默认是单行输入，当然也可以输入 <code>.editor</code>进行多行编辑，</p><p>使用 <code>Ctrl+D</code> 结束输入 <code>Ctrl+C</code> 取消。</p><h3 id="命令行执行" tabindex="-1">命令行执行 <a class="header-anchor" href="#命令行执行" aria-label="Permalink to &quot;命令行执行&quot;">​</a></h3><h4 id="命令行运行文件" tabindex="-1">命令行运行文件 <a class="header-anchor" href="#命令行运行文件" aria-label="Permalink to &quot;命令行运行文件&quot;">​</a></h4><p>我们可以直接通过 node 命令来执行我们的脚本，这个也是最常用的方式，</p><p>写一个 js 文件，然后命令行直接运行脚本即可。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="通过-eval-参数直接运行" tabindex="-1">通过 eval 参数直接运行 <a class="header-anchor" href="#通过-eval-参数直接运行" aria-label="Permalink to &quot;通过 eval 参数直接运行&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;const a = &#39;hello&#39;; console.log(a);&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>经试验，最外面必须是双引号，如果是单引号，此方法则报错（win11 下实验）。</p><h4 id="通过管道运算法执行" tabindex="-1">通过管道运算法执行 <a class="header-anchor" href="#通过管道运算法执行" aria-label="Permalink to &quot;通过管道运算法执行&quot;">​</a></h4><p>适用于部分 CI 环境中，直接拉 JS 脚本执行。win11 的 PowerShell 也可以。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(&#39;hello&#39;)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当然谨慎执行不明源码的脚本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 但是此方法在win11的PowerShell下并未执行成功，mac未验证</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://script.sugarat.top/js/tests/test.js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="直接执行" tabindex="-1">直接执行 <a class="header-anchor" href="#直接执行" aria-label="Permalink to &quot;直接执行&quot;">​</a></h4><blockquote><p>Hashbang (也称为 shebang) 是一种特殊的注释，以 #! 开头，通常出现在可执行的脚本文件的第一行，用于告诉系统要使用哪个解释器来执行该脚本文件。</p></blockquote><p>给文件 (<code>hello.js</code>) 开头加入 <code>Hashbang</code>，即如下代码 (<code>#!/usr/bin/env node</code>)，</p><p>PS：当该文件被执行时，系统将使用 node 解释器来执行该文件。这使得我们可以将 JavaScript 文件作为可执行的脚本文件来使用，而不必显式地调用解释器。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后赋予文件可执行权限，</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./hello.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>紧接着直接执行即可。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="通过编辑器执行" tabindex="-1">通过编辑器执行 <a class="header-anchor" href="#通过编辑器执行" aria-label="Permalink to &quot;通过编辑器执行&quot;">​</a></h4><p>webStorm 开箱即用，右键执行即可。</p><p>vs code 安装 code runner 运行即可。</p><p>vs code 使用内置的 debugger 工具，运行和调试也可以。</p>`,33),p=[l];function t(h,r,o,d,c,k){return e(),a("div",null,p)}const g=s(n,[["render",t]]);export{b as __pageData,g as default};
