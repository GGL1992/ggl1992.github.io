import{_ as s,c as a,o as n,a1 as i}from"./chunks/framework.EKgu3izQ.js";const b=JSON.parse('{"title":"npm","description":"","frontmatter":{},"headers":[],"relativePath":"code/front/nodejs/npm.md","filePath":"code/front/nodejs/npm.md"}'),e={name:"code/front/nodejs/npm.md"},p=i(`<h1 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h1><p>NPM (Node.js Package Manager) 是 Node.js 的包管理工具，它可以方便地安装、更新、卸载和管理开发中需要用到的各种包和模块。</p><p>查看版本信息：</p><p><code>npm -v</code></p><h2 id="配置国内镜像源" tabindex="-1">配置国内镜像源： <a class="header-anchor" href="#配置国内镜像源" aria-label="Permalink to &quot;配置国内镜像源：&quot;">​</a></h2><p>npm 默认的镜像源地址是 <code>https://registry.npmjs.org/</code>，</p><p>国内访问较慢，通常会使用淘宝开源的镜像站 <code>https://registry.npmmirror.com/</code>。</p><h3 id="手动切换" tabindex="-1">手动切换 <a class="header-anchor" href="#手动切换" aria-label="Permalink to &quot;手动切换&quot;">​</a></h3><p>查看当前的镜像源。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config get registry</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置为淘宝源。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config set registry https://registry.npmmirror.com/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用镜像源管理工具" tabindex="-1">使用镜像源管理工具 <a class="header-anchor" href="#使用镜像源管理工具" aria-label="Permalink to &quot;使用镜像源管理工具&quot;">​</a></h3><p>在实际开发过程中可能会有频繁修改镜像源的场景，每次都手动维护，相对比较麻烦。</p><p>可以使用 yrm 进行管理。</p><p>安装</p><p>通过 npm 进行安装。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g yrm --registry=https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调整一下淘宝源地址。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yrm add taobao https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看可用源：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yrm ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>切换源:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yrm use npm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yrm use taobao</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>添加自定义源：</p><p>在一般的中大型公司里，都会有自己的内网私有镜像源，可以通过如下方式添加到工具中，方便统一管理。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yrm add &lt;registry&gt; &lt;url&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yrm add taobao https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="常用指令" tabindex="-1">常用指令 <a class="header-anchor" href="#常用指令" aria-label="Permalink to &quot;常用指令&quot;">​</a></h2><h3 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init&quot;">​</a></h3><p>初始化 Node.js 项目，通常配合 -y 参数使用，使用-y 会跳过询问。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm init -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会自动在当前目录下创建 package.json 描述文件。</p><h3 id="install" tabindex="-1">install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;install&quot;">​</a></h3><p>主要用于包的安装。</p><p>① 安装一个包到当前项目</p><p>以安装 express 为例 (一个流行的 Node web 框架)，</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 作为 dependencies 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> express</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 作为 devDependencies 依赖安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> express</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不加 -D 参数依赖会出现在 package.json dependencies 中（打包会打进去），</p><p>反之则出现在 devDependencies 中（打包不会打进去）。</p><h4 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h4><p>添加 -g 参数，</p><p>对于一些带有 CLI 指令的包，通常使用这个参数，</p><p>比如前面介绍的 yrm。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -g yrm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装记录的依赖</p><p>当打开一个存量项目的时候，依赖的很多包，这些包会被记录在 package.json 中，</p><p>只需要执行 <code>npm install</code>，直接安装所有依赖即可。</p><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h3><p>更新某个包，</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm update &lt;pkgName&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 例如</span></span>
<span class="line"><span>npm update express</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当然也可以通过重新安装包的方式更新包。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install &lt;pkgName&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 例如</span></span>
<span class="line"><span>npm install express</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="uninstall" tabindex="-1">uninstall <a class="header-anchor" href="#uninstall" aria-label="Permalink to &quot;uninstall&quot;">​</a></h3><p>用于包的卸载。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 项目包</span></span>
<span class="line"><span>npm uninstall &lt;name&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 全局包</span></span>
<span class="line"><span>npm uninstall &lt;name&gt; -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="info-view" tabindex="-1">info/view <a class="header-anchor" href="#info-view" aria-label="Permalink to &quot;info/view&quot;">​</a></h3><p>查看某个包的基本信息。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm view &lt;pkg[@version]&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm view vue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm view vue@alpha</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run&quot;">​</a></h3><p>用于运行 npm 自定义指令，需要配合 package.json 中的 scripts 一起使用，</p><p>例如 package.json 中 scripts 中有如下内容。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node test.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当然一个脚本里也可以写多条指令用 &amp;&amp; 分割。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;multiple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node test.js &amp;&amp; npm run hello &amp;&amp; npm run test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="package-json-介绍" tabindex="-1">package.json 介绍 <a class="header-anchor" href="#package-json-介绍" aria-label="Permalink to &quot;package.json 介绍&quot;">​</a></h2><p>package.json 是 Node.js 项目中的配置文件，用于描述项目的基本信息、依赖关系和脚本等细节信息。</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>描述包名，</p><p>每个包名在 npm 上都是独一无二的，</p><p>一般由 小写字母 与连字符 - 构成。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也支持带有 scope，@scope/pkgName。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vue/cli&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>描述包版本，</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通常结构是 <code>x.y.z</code> 对应 <code>major.minor.patch</code>。</p><p>升级版本号的原则如下：</p><ul><li>major：主版本号，不兼容的 API 修改时；</li><li>minor：次版本号，向下兼容的功能性新增；</li><li>patch：修订号，向下兼容的问题修复。</li></ul><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>一般用于一句话描述包的作用。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The progressive JavaScript framework for building modern web UI.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><p>用于表明这个包的入口文件。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如当引入 express 的时候，如果有设置 main 属性，</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>实际上加载的就是 express/index.js 这个文件。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">​</a></h3><p>这个用于设置自定义 npm 脚本。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node test.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>设置后通过 npm run 执行。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h3><p>用于设置包的关键词，方便在 npm 中检索，</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;console&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="devdependencies-dependencies" tabindex="-1">devDependencies/dependencies <a class="header-anchor" href="#devdependencies-dependencies" aria-label="Permalink to &quot;devDependencies/dependencies&quot;">​</a></h3><p>① 作用是什么</p><p>两个属性都用于表明，运行这个包所需要的其它外部依赖，</p><p>dependencies 标明生产环境下需要用到的包 (运行这个包必备的外部其它依赖)，</p><p>devDependencies 标明开发环境下需要用到的包 (开发这个包时才用到的依赖)。</p><p>在实际开发中，通常会将开发依赖与生产依赖分开，以便减小生产环境的包大小，并提高构建和部署的速度。</p><p>下面举个例子方便理解，</p><p>以 express 为例，其 package.json 里有大量的依赖。</p><p>当我们的项目安装它的时候，会同时安装它 dependencies 指定的依赖，但不会安装 devDependencies 里的依赖。</p><p>但当我们开发运行 express 的源码时，在其源码项目里执行 npm install 时就会安装 devDependencies 里的依赖。</p><p>② 版本格式介绍</p><p>在不指定版本安装时，版本前面会附带一个 <code>^</code>，除了它还有 <code>~</code>。</p><ul><li><code>~</code> 符号：保持主版本号和次版本号不变，只更新小版本号。例如 <code>&quot;~1.2.3&quot;</code> 表示安装 <code>1.2.x</code> 系列的最新版本；</li><li><code>^</code> 符号：保持主版本号不变，更新次版本和小版本号。例如 <code>&quot;^1.2.3&quot;</code> 表示安装 <code>1.x.x</code> 系列的最新版本。</li></ul><p>这样做的目的是提高依赖包的兼容性。使用 <code>^</code> 或 <code>~</code> 符号，可以在不破坏 API 的情况下，获取到最新的修复和功能更新。(当然只在包非常遵循前面说的版本更新规范前提下)，</p><p>实际情况可能小版本也会带来 break change，</p><p>这个问题在后面说的 package-lock.json 中会得到一定的解决。</p><h3 id="node-modules" tabindex="-1">node_modules <a class="header-anchor" href="#node-modules" aria-label="Permalink to &quot;node_modules&quot;">​</a></h3><p>① 项目依赖存放路径</p><p>这是项目里存放第三方包的一个目录，安装的第三方包都会出现在这里面，通常与 package.json 处在同一级目录，</p><p>就比如前面安装的 express。</p><p>除了我们安装的包外，当然还可能包含一些间接依赖，比如上图中 express 的 dependencies 依赖。</p><p>② 全局依赖存放路径</p><p>使用如下指令即可获取全局依赖的存放路径。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 <code>npm i xx -g</code> 安装的依赖就会存放在这里。</p><h3 id="package-lock-json" tabindex="-1">package-lock.json <a class="header-anchor" href="#package-lock-json" aria-label="Permalink to &quot;package-lock.json&quot;">​</a></h3><p>package-lock.json 主要用于锁定项目依赖的版本号，以确保在不同的机器和环境中安装相同的依赖和版本。</p><p>它的作用主要有以下几个方面：</p><ul><li><p>一致性：确保在不同的机器和环境中安装相同的依赖版本；</p></li><li><p>安装提速：文件记录了依赖包的具体版本号和依赖关系，因此在执行 <code>npm install</code> 命令时，npm 可以直接从缓存中读取已经下载的依赖包，从而加速依赖安装；</p></li><li><p>稳定性：可以更加准确地控制项目的依赖版本，从而提高项目的稳定性和可靠性；如果不使用 <code>package-lock.json</code>，则每次安装依赖时，npm 可能会自动更新依赖包的版本，这可能会引入 bug 或导致行为发生变化，从而导致项目出现问题； 下面简单阐述一下各个属性的作用。</p></li><li><p><code>version</code>：实际安装的版本；</p></li><li><p><code>resolved</code>：包下载的地址；</p></li><li><p><code>integrity</code>：用于安全校验的哈希值，确保下载的包与发布的包一致；</p></li><li><p><code>dependencies</code>：当前包依赖的所有包的版本信息；</p></li><li><p><code>engines</code>：当前包运行需要的 Node 版本。</p></li></ul><h3 id="npmrc-介绍" tabindex="-1">.npmrc 介绍 <a class="header-anchor" href="#npmrc-介绍" aria-label="Permalink to &quot;.npmrc 介绍&quot;">​</a></h3><p><code>.npmrc</code> 文件是 NPM 的配置文件，它包含了一些 NPM 的配置信息，比如代理、镜像、命令别名等。通过修改 <code>.npmrc</code> 文件，可以更改 NPM 的默认行为。</p><p>全局中，<code>.npmrc</code> 文件通常位于用户主目录下 (Linux 和 Mac 是 <code>~/.npmrc</code>，Windows 是 <code>%USERPROFILE%/.npmrc</code>)。</p><p>也可以在项目根目录下创建一个 <code>.npmrc</code> 文件，此时该项目下执行 npm 将会复用此份配置。</p><p>例如修改 registry 配置，让项目协作同学不用主动设置镜像源的地址，也能和自己保持一致。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .npmrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://registry.npmjs.org/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个目录下获取到的 registry 和其它目录就会不同，</p><h3 id="npx-介绍" tabindex="-1">npx 介绍 <a class="header-anchor" href="#npx-介绍" aria-label="Permalink to &quot;npx 介绍&quot;">​</a></h3><p>npx 是随 Node.js 安装附带的另一个指令，可以更方便的调用 Node.js 生态中的包 (通常是一些 Node CLI 工具)，</p><p>使用 npx，可以在不全局安装一个命令行工具的情况下直接运行它，同时也不会污染全局环境。</p><p>比如 nodemon 这个 CLI 工具，可以在开发时替代 node 指令执行 js 文件，文件修改后自动重新执行。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直接通过npx 调用执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等价于</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ① 全局安装CLI工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ② 调用执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,138),l=[p];function t(r,d,h,c,o,k){return n(),a("div",null,l)}const m=s(e,[["render",t]]);export{b as __pageData,m as default};
