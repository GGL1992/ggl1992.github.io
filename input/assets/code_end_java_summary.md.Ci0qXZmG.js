import{_ as s,c as a,o as i,a1 as n}from"./chunks/framework.EKgu3izQ.js";const e="/input/assets/java-0001.G8szf7xw.jpg",g=JSON.parse('{"title":"java 概述","description":"","frontmatter":{},"headers":[],"relativePath":"code/end/java/summary.md","filePath":"code/end/java/summary.md"}'),l={name:"code/end/java/summary.md"},p=n(`<h1 id="java-概述" tabindex="-1">java 概述 <a class="header-anchor" href="#java-概述" aria-label="Permalink to &quot;java 概述&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>Java 长期支持版本：java8、java11、java17</p><p>JDK (Java Development Kit)：是 Java 程序开发工具包，包含 JRE 和开发人员使用的工 具。</p><p>JRE (Java Runtime Environment) ：是 Java 程序的运行时环境，包含 JVM 和运行时所 需要的核心类库。</p><p>JDK = JRE + 开发工具集（例如 Javac 编译工具等）</p><p>JRE = JVM + Java SE 标准类库</p><p>java11 开始，取消独立的 jre 安装包。</p><p>G1 是最受欢迎的 GC 算法。Java 11 及更高版本的 G1 收集器是默认的 GC，而 Java 8 中并不是。出于对 G1 的喜爱，很多开发者才会选择抛 弃 Java 8。</p><p>下载网址（Oracle 公司官网）：<code>www.oracle.com</code>。</p><p>如果需要安装其它版本，可以选择 Java archive。</p><p><strong>安装说明</strong></p><p>傻瓜式安装，下一步即可。</p><p>建议：安装路径不要有中文或者空格等特殊符号。</p><p><strong>理解 path 环境变量</strong></p><p><code>什么是 path 环境变量？</code></p><ul><li>window 操作系统执行命令时，所要搜寻的路径。</li></ul><p><code>为什么配置 path？</code></p><ul><li>希望在命令行使用 javac.exe 等工具时，任意目录下都可以找到这个工具所 在的目录。</li></ul><p>配置 JAVA_HOME+path（推荐）</p><p>注意：强烈建议将%JAVA_HOME%\\bin 声明在 path 环境变量中所有变 量的最前面！因为调用的时候，先从前面往后找。</p><p>为什么推荐使用 JAVA_HOME 变量呢？因为 tomcat 等，它会搜寻这个变量。</p><p>有的书籍、论坛、视频上还提到配置 <code>classpath</code>，用于指名 class 文件识别 的路径。其实是没必要的，反而建议大家如果配置了 <code>classpath</code> 环境变量， 要删除。对于初学者，反而不友好。</p><p>因为如果你在当前目录下生成了<code>Demo.class</code>文件的话，如果配置了<code>classpath</code>之后，执行<code>java Demo</code>这种类文件的时候，它会 classpath 下面去找，反而找不到执行的文件了。</p><p>Java17 会自动配置 path 路径，无需手动配置。但是它并不会使用 JAVA_HOME，所以如果需要使用此变量的话，需要自己修改一下。</p><p>而且自动配置的路径显示在 C 盘，这是因为它的那个路径会映射到你实际安装的路径，无需担心。</p><h2 id="开发步骤" tabindex="-1">开发步骤 <a class="header-anchor" href="#开发步骤" aria-label="Permalink to &quot;开发步骤&quot;">​</a></h2><p><code>Java</code> 程序开发三步骤：编写、编译、运行。</p><ul><li>将 <code>Java</code> 代码编写到扩展名为 <code>.java</code> 的源文件中</li><li>通过 <code>javac.exe</code> 命令对该 <code>java</code> 文件进行编译，生成一个或多个字节码文件</li><li>通过 <code>java.exe</code> 命令对生成的 <code>class</code> 文件进行运</li></ul><p>示例:</p><p>假设存在 HelloDemo.java 文件，内容如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译：<code>javac HelloDemo.java</code>。</p><p>得到: <code>HelloWorld.class</code>。得到的文件和类名同名，而不和文件名同名。</p><p>执行：<code>java HelloWorld</code>。执行文件，不加<code>.class</code>后缀。</p><p>编译主要是检查语法的问题，如果编译不通过，可以考虑：</p><ul><li>文件名、文件路径是否书写错误</li><li>查看代码中是否存在语法问题</li></ul><p>一个文件中，可以有多个类，如果存在多个类，编译就会生成多个<code>class</code>文件。</p><p>示例文件<code>HelloDemo.java</code>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloBeijing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行<code>javac HelloDemo.java</code>，就会生成<code>HelloWorld.class</code>和<code>HelloBeijing.class</code>两个 class 文件。</p><p>如果不存在<code>main</code>方法，编译不会报错，但是运行会报错。</p><p>一个文件中的类，只能有一个加<code>public</code>修饰符，并且加该修饰符的类名必须与文件名一致。</p><p>示例文件<code>HelloDemo.java</code>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloBeijing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>单行注释：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这是注释</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>多行注释：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* 这是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* 多行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* 注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>文档注释：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 作者</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>单行注释和多行注释，不会出现在编译之后的字节码文件(<code>.class</code>文件)中。</p><p>多行注释不能嵌套使用。</p><p>文档注释的内容可以被 JDK 提供的工具<code>javadoc</code>所解析，生成一套以网页文件形式体现的说明文档。</p><p>示例文件<code>JavaDemo.java</code>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 这是一段文档注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 高国良</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavaDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>生成文档:</p><p><code>javadoc -d mydoc -author -version JavaDemo.java</code></p><p>这时在 mydoc 文件夹下，就会生成文档文件。</p><p>注意事项：</p><p>如果报错编码格式不兼容，因为在记事本中格式是 utf-8，在命令行里是 GBK，所以会报错，在笔记本中将 java 文件另存为时，将编码格式调整为<code>ANSI</code>即可，这个兼容 GBK。</p><p>生成文档时，文件中必须存在 public 的类，否则会报错。</p><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><h3 id="一个-java源文件中是否可以包括多个类-有什么限制-明-数据" tabindex="-1">一个<code>.java</code>源文件中是否可以包括多个类？有什么限制(明*数据) <a class="header-anchor" href="#一个-java源文件中是否可以包括多个类-有什么限制-明-数据" aria-label="Permalink to &quot;一个\`.java\`源文件中是否可以包括多个类？有什么限制(明\\*数据)&quot;">​</a></h3><p>是！</p><p>一个源文件中可以声明多个类，但是最多只能有一个类使用 public 进行声明。 且要求声明为 public 的类的类名与源文件名相同。</p><h3 id="java-的优势-阿-巴" tabindex="-1">Java 的优势（阿**巴） <a class="header-anchor" href="#java-的优势-阿-巴" aria-label="Permalink to &quot;Java 的优势（阿\\*\\*巴）&quot;">​</a></h3><ul><li>跨平台型</li><li>安全性高</li><li>简单性</li><li>高性能</li><li>面向对象性</li><li>健壮性</li></ul><h3 id="java-中是否存在内存溢出、内存泄漏-如何解决-举例说明-拼-多" tabindex="-1">Java 中是否存在内存溢出、内存泄漏？如何解决？举例说明（拼*多） <a class="header-anchor" href="#java-中是否存在内存溢出、内存泄漏-如何解决-举例说明-拼-多" aria-label="Permalink to &quot;Java 中是否存在内存溢出、内存泄漏？如何解决？举例说明（拼\\*多）&quot;">​</a></h3><p>存在！</p><p>举例略</p><h3 id="如何看待-java-是一门半编译半解释型的语言-携" tabindex="-1">如何看待 Java 是一门半编译半解释型的语言（携*） <a class="header-anchor" href="#如何看待-java-是一门半编译半解释型的语言-携" aria-label="Permalink to &quot;如何看待 Java 是一门半编译半解释型的语言（携\\*）&quot;">​</a></h3><p><img src="`+e+'" alt="如何看待Java是一门半编译半解释型的语言" loading="lazy"></p>',74),t=[p];function h(r,d,c,k,o,u){return i(),a("div",null,t)}const b=s(l,[["render",h]]);export{g as __pageData,b as default};
